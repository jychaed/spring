┏────────────────────────────┐
│	1장. 스프링 개발 환경    │
└────────────────────────────┛

	JDK 1.8, Tomcat 8.5.x , Oracle 11g xe
	이클립스 4.16, STS 3.9.15
	
┏────────────────────────────┐
│	2장. 프로젝트 생성       │
└────────────────────────────┛
	
	스프링 MVC 구조
	
		1. 스프링 MVC 구조
			스프링 MVC는 DispatcherServlet, View Resolver, Handler, View 등으로 구성되어 있다.
			
			스프링 MVC 요청 처리 흐름도
			[단계별 설명]
			1) 클라이언트 (브라우저)의 요청을 DispatcherServlet이 받는다.
			2) 받은 요청을 처리할 수 있는 Handler의 이름을 HandlerMapping에게 물어본다.
			3) HandlerMapping은 요청 URL을 비롯한 여러 요청 정보를 가지고 handler를 판단한다.
			4) DispatcherServlet은 HandlerMapping으로 부터 선택받은 Handler에게 요청을 보낸다.
			5) Handler는 요청을 적절히 처리하고 응답에서 랜더링해야하는 View Name을 판단해서 DispatcherServlet에게 전송한다.
			6) DispatcherServlet은 논리적인 View Name을 View Resolver 에 전달한다.
			7) View Resolver는 응답에 필요한 View를 생성하여 DispatcherServlet에 보낸다.
			8) DispatcherServlet은 해당하는 View에 Model을 전달한다.
			9) View는 Model을 참조해서 응답을 생성한다.
			10) DispatcherServlet은 생성된 응답을 클라이언트 (브라우저)에 반환한다
		
		2. 스프링 MVC 프로젝트 생성
			Spring Legacy Project(Spring MVC Project) 생성
			
		3. MVC 프로젝트 파일 구성
			프로젝트를 새로 생성하면 관련 파일들과 폴더들이 자동으로 생성된다.
			
			구성요소
			- pom.xml												: 메이븐 프로젝트 빌드 파일
			- src/main/java											: 자바 소스 경로
			- src/main/resources									: 리소스 파일경로
			- src/.../WEB-INF/web.xml								: 웹컨데이너 설정 파일
			- src/.../WEB-INF/spring/root-context.xml				: 스프링 설정 파일
			- src/.../WEB-INF/spring/appServlet/servlet-context.xml	: 스프링 웹 설정 파일
			- src/.../WEB-INF/views									: 뷰 파일 경로
			
		4. 로그 레벨 설정
		
		Log4j 구성요소
		
			요소			│					설명
		───────────────────────────────────────────────────────────────────────────────────────────────────────────
			Logger			│		 출력할 메세지를 Appender에 전달합니다
		───────────────────────────────────────────────────────────────────────────────────────────────────────────
			Appender		│		 전달된 로그를 어디에 출력할지 결정합니다.( 콘솔 출력, 파일 기록, DB저장 등)
		───────────────────────────────────────────────────────────────────────────────────────────────────────────
			Layout			│		 로그를 어떤 형식으로 출력할 지 결정합니다.
		───────────────────────────────────────────────────────────────────────────────────────────────────────────

		Log4j 레벨
		
			로그레벨		│						설명
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			FATAL			│	 	아주 심각한 에러가 발생한 상태
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			ERROR			│	 	어떠한 요청을 처리하는 중 문제가 발생한 상태
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			WARN			│		프로그램의 실행에는 문제가 없지만 향후 시스템 에러의 원인이 될 수 있는 경고성 메세지 출력
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			INFO			│		어떠한 상태변경과 같은 정보성 메세지 출력
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			DEBUG			│		개발시 디버그 용도로 사용하는 메세지 출력
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			TRACE			│		디버그 레벨이 너무 광범위한것을 해결하기 위해서 좀더 상세한 이벤트를 나타냄
		───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
			
┏────────────────────────────┐
│	3장. 컨트롤러 요청 매핑  │
└────────────────────────────┛
	
	1. 요청 경로 매핑
		@RquestMapping의 value속성에 요청 경로를 설정한다.
		- 요청 경로는 반드시 설정해야 하는 필수 정보이다.
		- 속성이 하나일 때는 속성명을 생략할 수 있다.
		- 컨트롤러의 클래스 레벨과 메서드 레벨로 지정할 수 있다.
		- 클래스 레벨로 요청 경로에 지정하면 메서드 레벨에서 지정한 경로의 기본 경로로 취급된다.
		- 클래스 레벨의 요청 경로에 메서드 레벨의 요청 경로를 덧붙인 형태가 최종 경로가 된다.
		
		[요청과 매핑]
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register")
		
	2. 경로 패턴 매핑
		요청 경로를 동적으로 표현이 가능한 경로 패턴을 지정할 수 있다.
		-  URL 경로 상의 변하는 값을 경로 변수로 취급한다.
		- 경로 변수에 해당하는 값을 파라미터 변수에 설정할 수 있다.
		
		[요청과 매핑]
		요청 : http://localhost/board/read/100
		매핑 : @RequestMapping(value="/board/read/{boardNo}")				
			
	3. HTTP 메소드 매핑
		method 속성을 사용하여 HTTP 메소드를 매핑 조건으로 지정할 수 있다.
		화면으로 응답하는 경우에는 HTTP 메소드로 GET방식과 POST방식 두가지를 사용할 수 있다		
		
		[요청과 매핑]
		요청 : http://localhost/board/register
		매핑 : @RequestMapping(value="/board/register", method = RequestMethod.GET)		
		매핑 : @RequestMapping(value="/board/register", method = RequestMethod.POST)		
			
	4. Params 매핑
		요청 파라미터를 매핑 조건으로 지정하는 경우에는  params 속성을 사용한다.
		버튼이나 링크에 따라 호출할 메서드를 바궈야 할 때 사용한다.
		
		[요청과 매핑]
		요청 : http://localhost/board/get?register
		매핑 : @RequestMapping(value="/board/{boardNo}", method = RequestMethod.PUT)				
			
	5. Header 매핑
		요청 헤더를 매핑 조건으로 지정하는 경우에는 headers 속성을 사용한다.			
			
		[요청과 매핑]
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method = RequestMethod.PUT, headers = "X-HTTP-Method-Override=PUT")
	
	6. Content Type 매핑
		요청의 Content Type 헤더값을 매핑 조건으로 지정하는 경우에는 consumes 속성을 사용한다.
		
		[요청과 매핑]
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method = RequestMethod.POST, consumes = "application/json")
		
	7. Accept 매핑
		요청 Accept 헤더 값을 매핑 조건으로 지정하는 경우에는 produces, 속성을 사용한다.
		
		[요청과 매핑]
		요청 : http://localhost/board/100
		매핑 : @RequestMapping(value="/board/{boardNo}", method = RequestMethod.GET, produces = "application/json")
			
┏────────────────────────────┐
│	4장. 컨트롤러 응답		 │
└────────────────────────────┛
	
	1. Void 타입
		호출하는 URL과 동일한 뷰 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHeom0101
		응답 : void(요청한 경로와 동일한 뷰 이름으로 리턴)
		
	2. String 타입
		뷰 파일의 경로와 파일 이름을 나타내기 위해 사용한다.
		
		[요청과 응답]
		요청 : http://localhost/goHeom0201
		응답 : String( 반환된 값으로 페이지를 찾는다.)
		
	3. 자바빈즈 클래스 타입
		JSON 객체 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- jackson-databind 라이브러리를 설치하고 @ResponseBody를 지정하여 객체를 응답으로 내보낼 수 있다.
		- 둘중에 1개라도 하지 않는 경우, 에러가 발생할 수 있다.		
				
		[요청과 응답]
		요청 : http://localhost/goHeom0301
		응답 : 자바빈즈 ( 객체에 값이 담겨 해당 객체를 리턴한다.)
		
	4. 컬렉션 List 타입
		JSON 객체 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 List 타입이면 JSON 객체 배열 타입으로 자동으로 반환한다.
				
		[요청과 응답]
		요청 : http://localhost/goHeom0401
		응답 : 컬렉션 List
		
	5. 컬렉션 Map 타입
		Map 형태의 컬렉션 자료를 JSON 객체 타입의 데이터로 만들어서 반환하는 용도로 사용한다.
		- 반환값이 컬렉션 Map 타입이면 JSON 객체 타입으로 자동으로 변환된다.
		
				
		[요청과 응답]
		요청 : http://localhost/goHeom0501
		응답 : 컬렉션 Map
		
	6. ResponseEntity<Void> 타입
		response할 때 HTTP 헤더 정보와 내용을 가공하는 용도로 사용한다.
		- 반환값이 해당 URL이므로 개발자도구 > 네트워킹 탭을 활용하여 응답된 페이지 정보를 확인할 수 있다.
		
				
		[요청과 응답]
		요청 : http://localhost/goHeom0601
		응답 : ResponseEntity<Void>
		
	7. ResponseEntity<String> 타입
		response할 때 HTTP 헤더 정보와 문자열 데이터를 전달하는 용도로 사용한다.
		- 페이지에서 결과값으로 문자열을 함께 확인할 수 있다.
		
				
		[요청과 응답]
		요청 : http://localhost/goHeom0701
		응답 : ResponseEntity<String>
		
	8. ResponseEntity<Member> 타입
		response할 때 HTTP 헤더 정보와 객체 데이터를 전달하는 용도로 사용한다.
				
		[요청과 응답]
		요청 : http://localhost/goHeom0801
		응답 : ResponseEntity<Member>
		
	9. ResponseEntity<List<Member>> 타입
		response할 때 HTTP 헤더 정보와 객체 배열 데이터를 전달하는 용도로 사용한다.
				
		[요청과 응답]
		요청 : http://localhost/goHeom0901
		응답 : ResponseEntity<List<Member>>
		
	10. ResponseEntity<Map<String, Member>> 타입
		response할 때 HTTP 헤더 정보와 객체데이터를 Map 형태로 전달하는 용도로 사용한다.
				
		[요청과 응답]
		요청 : http://localhost/goHeom1001
		응답 : ResponseEntity<Map<String, Member>>
		
	11. ResponseEntity<byte[]> 타입
		response할 때 HTTP 헤더 정보와 바이너리 파일데이터를 전달하는 용도로 사용한다.
		- 파일을 처리하는 경우에는 의존 라이브러리(commons-io)를 추가해야한다.
		- 추가는 pom.xml에서 dependency를 추가한다
				
		[요청과 응답]
		요청 : http://localhost/goHeom1101
			   http://localhost/goHeom1102
		응답 : ResponseEntity<byte[]>
		
		
		
		
		
		
		
		
				
			
			
			
			
			
			
		